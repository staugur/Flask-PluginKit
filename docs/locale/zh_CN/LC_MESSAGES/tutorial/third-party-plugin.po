# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, staugur
# This file is distributed under the same license as the Flask-PluginKit
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask-PluginKit 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-24 22:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../tutorial/third-party-plugin.rst:2
msgid "Third party plugin"
msgstr "第三方插件"

#: ../../tutorial/third-party-plugin.rst:5
msgid "Description"
msgstr "描述"

#: ../../tutorial/third-party-plugin.rst:7
msgid ""
"Third-party plugins are non-program subdirectories, local modules from "
"installations such as ``pip`` or ``easy_install``."
msgstr "第三方插件不是应用程序子目录，而是使用诸如 ``pip install`` 或 ``easy_install`` 等安装到本地的模块。"

#: ../../tutorial/third-party-plugin.rst:10
msgid ""
"The third-party plugin is easy to use, the program can not put the plugin"
" code into the subdirectory, just use `pip install` to install to the "
"local machine, and then pass the "
":attr:`~flask_pluginkit.PluginManager.plugin_packages` parameter when the"
" :class:`~flask_pluginkit.PluginManager` is initialized."
msgstr ""
"第三方插件解放使用，Web应用程序不需要将插件代码放入子目录，只需要使 `pip install` 或 `easy_install` "
"等安装到本地机器上，然后在初始化 :class:`~flask_pluginkit.PluginManager` 时，传入 "
":attr:`~flask_pluginkit.PluginManager.plugin_packages` 参数。"

#: ../../tutorial/third-party-plugin.rst:16
msgid ""
"This means that anyone can write a package and publish it to pypi, and "
"the user writes **requirements.txt** and installs the dependent plugin, "
"which is called in the initialization, and almost no need to worry about "
"subsequent third-party plugin upgrades."
msgstr ""
"这意味着任何人都可以编写一个包并将其发布到pypi。用户编写 ``requirements.txt`` "
"并安装依赖项，这些依赖项在初始化中被调用，而几乎不用担心后续第三方插件升级。"

#: ../../tutorial/third-party-plugin.rst:21
msgid ""
"In this version, you can automatically install third-party packages in "
"the :attr:`~flask_pluginkit.PluginManager.install_packages` parameter."
msgstr ""
"在这个版本，你可以自动安装第三方依赖包，初始化时传入 "
":attr:`~flask_pluginkit.PluginManager.install_packages` 参数。"

#: ../../tutorial/third-party-plugin.rst:25
msgid "Format reference:"
msgstr "格式参考："

#: ../../tutorial/third-party-plugin.rst:33
msgid ""
"The ``pkgs`` field is a list of packages, which can be PyPi packages, VCS"
" URLs, or other package formats supported by pip."
msgstr ""
"示例中 ``pkgs`` 字段是必需的， list 类型，可以是 PyPi 包、 VCS 地址（如github、svn），"
"或其他 pip install 支持的包类型。"

#: ../../tutorial/third-party-plugin.rst:36
msgid ""
"If install with VCS URL, recommend carrying ``#egg=package-name`` to "
"check if it has been installed and avoid duplicate installations."
msgstr ""
"如果安装 VCS URL 类型，推荐携带 ``#egg=package-name`` 以便检查是否已经安装，"
"避免重复安装。"

#: ../../tutorial/third-party-plugin.rst:39
msgid ""
"If you want to install from a specific index, you can specify the "
"``index`` field, which defaults to empty."
msgstr ""
"如果你想在安装时指定 pip 软件源，可以用 ``index`` 字段，默认是空。"

#: ../../tutorial/third-party-plugin.rst:43
msgid "Local Plugin"
msgstr "本地插件"

#: ../../tutorial/third-party-plugin.rst:45
msgid ""
"It's a package under the web application, which is part of the web "
"application, and the plugin developer is the user, more see :ref:`core-"
"plugin-structure`."
msgstr ""
"它是Web应用程序下的一个包，是Web的一部分，对于本地插件来说，插件开发人员就是用户本人，要了解更多参考 :ref:`core-plugin-"
"structure`"

#: ../../tutorial/third-party-plugin.rst:49
msgid "How to develop plugins?"
msgstr "如何开发插件？"

#: ../../tutorial/third-party-plugin.rst:51
msgid ""
"The local plugin only needs the first step, and the third party plugin "
"needs to write ``setup.py``, which requires the next few steps."
msgstr "本地插件只需要第一步，第三方插件需要编写 ``setup.py`` ，需要后面几步。"

#: ../../tutorial/third-party-plugin.rst:54
msgid ""
"First create a package, the metadata and register functions should be "
"written in ``__init__.py``, the core code can also be written in this "
"file, of course, the recommended approach is to separate the module."
msgstr ""
"首先创建一个包，应该在包的 ``__init__.py`` "
"中编写元数据和register函数返回扩展点，其他核心代码也可以写在这个文件中，当然，推荐做法是独立模块。"

#: ../../tutorial/third-party-plugin.rst:58
msgid ""
"The first step is actually the process of writing local plugins. In this "
"step, you need to write `setup.py`, so that local plugins can be "
"(published in pypi, optionally) used by others through pip:"
msgstr "第一步实际上是编写本地插件的过程。这一步，你需要编写 `setup.py` ，以便本地插件可以（发布到pypi，可选）让其他人通过pip使用："

#: ../../tutorial/third-party-plugin.rst:72
msgid ""
"If your plugin contains template directory or static directory, you need "
"to write an additional manifest file ``MANIFEST.in``:"
msgstr "如果你的插件包含模板文件或静态文件，还需要编写 ``MANIFEST.in`` 清单文件。"

#: ../../tutorial/third-party-plugin.rst:80
msgid "Testing, Release"
msgstr "测试，发布"

#: ../../tutorial/third-party-plugin.rst:82
msgid "The modules required by the following commands can be installed like this:"
msgstr "以下命令所需的模块可以这样安装："

#: ../../tutorial/third-party-plugin.rst:88
msgid ""
"4.1 Use ``pip install .`` to install to the local environment and test "
"the plugin functionality."
msgstr "4.1 使用 ``pip install .`` 安装到本地虚拟环境或全局，并测试插件功能。"

#: ../../tutorial/third-party-plugin.rst:91
msgid ""
"4.2 If the plugin is as expected, it can be packaged and the command is: "
"``python setup.py sdist bdist_wheel``, more parameters to adjust "
"themselves."
msgstr "4.2 如果插件功能符合预期，可以使用命令打包： ``python setup.py sdist bdist_wheel`` ，更多参数自行调整。"

#: ../../tutorial/third-party-plugin.rst:94
msgid ""
"4.3 Before the official release, you can post to test.pypi.org, which is "
"the official pypi test site. The package inside will not be used easily. "
"The command is: ``twine upload --repository-url "
"https://test.pypi.org/legacy/ dist/*``"
msgstr ""
"4.3 在发布到pypi.org前，你可以发布到test.pypi.org，这是官方的pypi测试网站，里面的包不会轻易使用，命令是： "
"``twine upload --repository-url https://test.pypi.org/legacy/ dist/*`` "

#: ../../tutorial/third-party-plugin.rst:99
msgid ""
"4.4 The test station can look at the interface description and so on "
"whether it meets the requirements of the heart, and publish it to the "
"official station without problems, pypi.org, the command is: ``twine "
"upload dist/*``"
msgstr "4.4 你可以在这个测试站查看描述等有没有问题，无误后发布到正式站pypi.org，命令是： ``twine upload dist/*`` "

#: ../../tutorial/third-party-plugin.rst:104
msgid "`Third-party example <https://github.com/saintic/flask-pluginkit-demo>`_"
msgstr "`第三方插件示例 <https://github.com/saintic/flask-pluginkit-demo>`_"

#~ msgid ""
#~ "Format reference: `{\"pkgs\": [\"third-"
#~ "package-from-pypi\", \"third-package-"
#~ "from-git\"], \"index\":\"pypi or mirror\"}`"
#~ msgstr ""

#~ msgid ""
#~ "Format reference: ```json {\"pkgs\": "
#~ "[\"third-package-from-pypi\", \"third-"
#~ "package-from-git\"], \"index\":\"pypi or "
#~ "mirror\"} ```"
#~ msgstr ""

